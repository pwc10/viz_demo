# -*- coding: utf-8 -*-
"""solomon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1olO3HSuz2gfmKAcLoQyH_76rTZgcsS7L
"""

import numpy as np
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objects as go
from datetime import datetime

df = pd.read_excel('Solomon Raw Data.xlsx','DM',header=1)

df = df[['SiteName','SubjectId','EventName','BRTHDAT','SEX']]


# Convert Birth_Date to datetime format
df['BRTHDAT'] = pd.to_datetime(df['BRTHDAT'], format='%Y-%m')

# Calculate age from birth date
current_date = datetime.now()
df['Age'] = (current_date - df['BRTHDAT']).astype('<m8[Y]')

# Calculate age distribution for each gender
bins = [18, 25, 35, 45, 55, 65, 75]

# Create a simple dashboard using Dash
app = dash.Dash(__name__)

app.layout = html.Div(children=[
    html.H1(children='Clinical Trial Dashboard'),

    dcc.Dropdown(
        id='gender-dropdown',
        options=[
            {'label': 'All', 'value': 'all'},
            {'label': 'Male', 'value': 'Male'},
            {'label': 'Female', 'value': 'Female'}
        ],
        value='all',
        style={'width': '50%'}
    ),

    dcc.Graph(
        id='age-distribution',
    )
])

# Define callback to update the age distribution based on gender selection
@app.callback(
    dash.dependencies.Output('age-distribution', 'figure'),
    [dash.dependencies.Input('gender-dropdown', 'value')]
)
def update_age_distribution(selected_gender):
    if selected_gender == 'all':
        filtered_df = df
    else:
        filtered_df = df[df['SEX'] == selected_gender]

    age_distribution = pd.cut(filtered_df['Age'], bins=bins, include_lowest=True, right=False)
    age_counts = age_distribution.value_counts().sort_index()

    # Define custom colors for each bar
    custom_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']

    # Create a histogram using Plotly.graph_objects
    fig = go.Figure()

    fig.add_trace(go.Bar(
        x=age_counts.index.astype(str),
        y=age_counts.values,
        text=age_counts.values,  # Text to display on each bar
        textposition='auto',     # Position text automatically
        marker=dict(color=custom_colors)
    ))

    # Update layout
    fig.update_layout(
        title=f'Age Distribution in the Clinical Trial ({selected_gender})',
        xaxis=dict(title='Age Groups'),
        yaxis=dict(title='Number of Participants')
    )

    return fig

if __name__ == '__main__':
    app.run_server(debug=True, port=8050)

